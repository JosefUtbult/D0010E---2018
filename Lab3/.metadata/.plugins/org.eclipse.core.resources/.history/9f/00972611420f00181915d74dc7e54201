import java.util.ArrayList;
import java.util.NoSuchElementException;

public class FIFO implements Queue {
	
	private ArrayList<Object> queue;
	private int longestQueue;
	
	public FIFO() {
		queue = new ArrayList<>();
		longestQueue = 0;
	}
	
	@Override
	public boolean equals(Object f) {
		if(this.isEmpty()) {
			return false;
		}
		
		if(f.getClass() != this.getClass()) {
			return false;
		}
		
		FIFO fifoF = (FIFO) f;
		
		if(queue.size() != fifoF.getQueue().size()) {
			return false;
		}
		
		for(int i = 0; i < queue.size(); i++ ) {
			if(this.queue.get(i) != fifoF.getQueue().get(i)) {
				System.out.format("i: %d, this[i]: %d, f[i]: %d\n", i, this.queue.get(i), fifoF.getQueue().get(i));
				return false;
			}
		}
		
		return true;
	}
	
	public ArrayList<Object> getQueue(){
		return queue;
	}
	
	@Override
	public void add(Object arg0) {

		queue.add(arg0);
		
		longestQueue = longestQueue > queue.size() ? longestQueue : queue.size();
		
	}

	@Override
	public Object first() throws NoSuchElementException {
		
		try {
			return queue.get(0);
		} catch(IndexOutOfBoundsException e) {
			throw new NoSuchElementException();
		}
	}

	@Override
	public boolean isEmpty() {
		return queue.isEmpty();
	}

	@Override
	public int maxSize() {
		return longestQueue;
	}

	@Override
	public void removeFirst() throws NoSuchElementException {
		try {
			queue.remove(0);
		} catch (IndexOutOfBoundsException e) {
			throw new NoSuchElementException();
		}
	}

	@Override
	public int size() {
		return queue.size();
	}
	
	@Override
	public String toString() {
		
	}

}
